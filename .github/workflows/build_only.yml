name: Build only

on:
  workflow_dispatch:
  pull_request:

env:
  BAZEL_USER_ROOT: "/private/var/tmp/_bazel_telegram" # use canonical bazel root

jobs:
  build:
    runs-on: macos-12

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: '0'

      - name: Set active Xcode path
        run: |
          XCODE_VERSION=$(cat versions.json | python3 -c 'import json,sys;obj=json.load(sys.stdin);print(obj["xcode"]);')
          sudo xcode-select -s /Applications/Xcode_$XCODE_VERSION.app/Contents/Developer

      - name: Create canonical source directory
        run: |
          set -x
          sudo mkdir /Users/telegram
          sudo chown -R $(whoami) /Users/telegram
          cp -R $GITHUB_WORKSPACE /Users/telegram/
          mv /Users/telegram/$(basename $GITHUB_WORKSPACE) /Users/telegram/telegram-ios

      - name: Bazel cache
        uses: actions/cache@v3
        with:
          path: ${{ env.BAZEL_USER_ROOT }}
          key: ${{ runner.os }}-bazel-cache

      - name: Build the App
        env:
          SIGNING_CERTIFICATE_P12_DATA: ${{ secrets.SIGNING_CERTIFICATE_P12_DATA }}
          SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}
          PROVISIONING_PROFILE_APP_DATA: ${{ secrets.PROVISIONING_PROFILE_APP_DATA }}
          PROVISIONING_PROFILE_BROADCAST_UPLOAD_DATA: ${{ secrets.PROVISIONING_PROFILE_BROADCAST_UPLOAD_DATA }}
          PROVISIONING_PROFILE_INTENTS_DATA: ${{ secrets.PROVISIONING_PROFILE_INTENTS_DATA }}
          PROVISIONING_PROFILE_NOTIFICATION_CONTENT_DATA: ${{ secrets.PROVISIONING_PROFILE_NOTIFICATION_CONTENT_DATA }}
          PROVISIONING_PROFILE_NOTIFICATION_SERVICE_DATA: ${{ secrets.PROVISIONING_PROFILE_NOTIFICATION_SERVICE_DATA }}
          PROVISIONING_PROFILE_SHARE_DATA: ${{ secrets.PROVISIONING_PROFILE_SHARE_DATA }}
          PROVISIONING_PROFILE_WATCH_APP_DATA: ${{ secrets.PROVISIONING_PROFILE_WATCH_APP_DATA }}
          PROVISIONING_PROFILE_WATCH_EXTENSION_DATA: ${{ secrets.PROVISIONING_PROFILE_WATCH_EXTENSION_DATA }}
          PROVISIONING_PROFILE_WIDGET_DATA: ${{ secrets.PROVISIONING_PROFILE_WIDGET_DATA }}
        run: |
          set -x

          # source code paths are included in the final binary, so we need to make them stable across builds
          SOURCE_DIR=/Users/telegram/telegram-ios

          cd $SOURCE_DIR

          BUILD_NUMBER_OFFSET="$(cat build_number_offset)"

          export APP_VERSION=$(cat versions.json | python3 -c 'import json,sys;obj=json.load(sys.stdin);print(obj["app"]);')
          export COMMIT_COUNT=$(git rev-list --count HEAD)
          export COMMIT_COUNT="$(($COMMIT_COUNT+$BUILD_NUMBER_OFFSET))"
          export BUILD_NUMBER="$COMMIT_COUNT"
          echo "BUILD_NUMBER=$(echo $BUILD_NUMBER)" >> $GITHUB_ENV
          echo "APP_VERSION=$(echo $APP_VERSION)" >> $GITHUB_ENV

          # prepare temporary keychain
          export MY_KEYCHAIN="$RUNNER_TEMP/temp.keychain"
          export MY_KEYCHAIN_PASSWORD="secret"
          security create-keychain -p "$MY_KEYCHAIN_PASSWORD" "$MY_KEYCHAIN"
          security list-keychains -d user -s "$MY_KEYCHAIN" $(security list-keychains -d user | sed s/\"//g)
          security set-keychain-settings "$MY_KEYCHAIN"
          security unlock-keychain -p "$MY_KEYCHAIN_PASSWORD" "$MY_KEYCHAIN"

          # install certificates
          SIGNING_CERTIFICATE_PATH="$RUNNER_TEMP/signing_certificate.p12"
          echo "$SIGNING_CERTIFICATE_P12_DATA" | base64 -di - > "$SIGNING_CERTIFICATE_PATH"
          security import "$SIGNING_CERTIFICATE_PATH" -k "$MY_KEYCHAIN" -P "$SIGNING_CERTIFICATE_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple: -k "$MY_KEYCHAIN_PASSWORD" "$MY_KEYCHAIN"

          # use the official release configuration
          rm -rf $HOME/telegram-configuration
          mkdir -p $HOME/telegram-configuration
          cp build-system/appstore-configuration.json $HOME/telegram-configuration/

          # prepare provisioning profiles
          PROVISIONING_PATH=$HOME/telegram-configuration/provisioning/profiles
          mkdir -p $PROVISIONING_PATH

          echo "$PROVISIONING_PROFILE_APP_DATA" | base64 -di - > "$PROVISIONING_PATH/Telegram.mobileprovision"
          echo "$PROVISIONING_PROFILE_BROADCAST_UPLOAD_DATA" | base64 -di - > "$PROVISIONING_PATH/BroadcastUpload.mobileprovision"
          echo "$PROVISIONING_PROFILE_INTENTS_DATA" | base64 -di - > "$PROVISIONING_PATH/Intents.mobileprovision"
          echo "$PROVISIONING_PROFILE_NOTIFICATION_CONTENT_DATA" | base64 -di - > "$PROVISIONING_PATH/NotificationContent.mobileprovision"
          echo "$PROVISIONING_PROFILE_NOTIFICATION_SERVICE_DATA" | base64 -di - > "$PROVISIONING_PATH/NotificationService.mobileprovision"
          echo "$PROVISIONING_PROFILE_SHARE_DATA" | base64 -di - > "$PROVISIONING_PATH/Share.mobileprovision"
          echo "$PROVISIONING_PROFILE_WATCH_APP_DATA" | base64 -di - > "$PROVISIONING_PATH/WatchApp.mobileprovision"
          echo "$PROVISIONING_PROFILE_WATCH_EXTENSION_DATA" | base64 -di - > "$PROVISIONING_PATH/WatchExtension.mobileprovision"
          echo "$PROVISIONING_PROFILE_WIDGET_DATA" | base64 -di - > "$PROVISIONING_PATH/Widget.mobileprovision"

          # build the app
          python3 build-system/Make/Make.py \
            --bazelUserRoot="$BAZEL_USER_ROOT" \
            build \
            --configurationPath="$HOME/telegram-configuration/appstore-configuration.json" \
            --codesigningInformationPath="$HOME/telegram-configuration/provisioning" \
            --buildNumber=$BUILD_NUMBER \
            --configuration=release_arm64
