#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
#ifndef ECOMMPAYSDK_SWIFT_H
#define ECOMMPAYSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ecommpaySDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum AdditionalFieldType : NSInteger;
@class NSString;

SWIFT_CLASS("_TtC11ecommpaySDK15AdditionalField")
@interface AdditionalField : NSObject
@property (nonatomic) enum AdditionalFieldType type;
@property (nonatomic, copy) NSString * _Nonnull value;
@property (nonatomic, copy) NSString * _Nonnull serverName;
- (nonnull instancetype)initWithType:(enum AdditionalFieldType)type value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCustomName:(NSString * _Nonnull)customName value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM(NSInteger, AdditionalFieldType, open) {
  customer_first_name SWIFT_COMPILE_NAME("customer_first_name") = 0,
  customer_middle_name SWIFT_COMPILE_NAME("customer_middle_name") = 1,
  customer_last_name SWIFT_COMPILE_NAME("customer_last_name") = 2,
  customer_phone SWIFT_COMPILE_NAME("customer_phone") = 3,
  customer_email SWIFT_COMPILE_NAME("customer_email") = 4,
  customer_country SWIFT_COMPILE_NAME("customer_country") = 5,
  customer_state SWIFT_COMPILE_NAME("customer_state") = 6,
  customer_city SWIFT_COMPILE_NAME("customer_city") = 7,
  customer_address SWIFT_COMPILE_NAME("customer_address") = 8,
  customer_zip SWIFT_COMPILE_NAME("customer_zip") = 9,
  customer_day_of_birth SWIFT_COMPILE_NAME("customer_day_of_birth") = 10,
  customer_birthplace SWIFT_COMPILE_NAME("customer_birthplace") = 11,
  customer_ssn SWIFT_COMPILE_NAME("customer_ssn") = 12,
  customer_domain SWIFT_COMPILE_NAME("customer_domain") = 13,
  customer_mir SWIFT_COMPILE_NAME("customer_mir") = 14,
  customer_account_id SWIFT_COMPILE_NAME("customer_account_id") = 15,
  customer_language SWIFT_COMPILE_NAME("customer_language") = 16,
  customer_screen_res SWIFT_COMPILE_NAME("customer_screen_res") = 17,
  customer_save SWIFT_COMPILE_NAME("customer_save") = 18,
  billing_postal SWIFT_COMPILE_NAME("billing_postal") = 19,
  billing_country SWIFT_COMPILE_NAME("billing_country") = 20,
  billing_region SWIFT_COMPILE_NAME("billing_region") = 21,
  billing_city SWIFT_COMPILE_NAME("billing_city") = 22,
  billing_address SWIFT_COMPILE_NAME("billing_address") = 23,
  identify_doc_number SWIFT_COMPILE_NAME("identify_doc_number") = 24,
  identify_doc_type SWIFT_COMPILE_NAME("identify_doc_type") = 25,
  identify_doc_issue_date SWIFT_COMPILE_NAME("identify_doc_issue_date") = 26,
  identify_doc_issue_by SWIFT_COMPILE_NAME("identify_doc_issue_by") = 27,
  custom SWIFT_COMPILE_NAME("custom") = 28,
  doku_customer_first_name SWIFT_COMPILE_NAME("doku_customer_first_name") = 29,
  doku_customer_email SWIFT_COMPILE_NAME("doku_customer_email") = 30,
  neteller_account_number SWIFT_COMPILE_NAME("neteller_account_number") = 31,
  qiwi_account_number SWIFT_COMPILE_NAME("qiwi_account_number") = 32,
  webmoney_classic_account_number SWIFT_COMPILE_NAME("webmoney_classic_account_number") = 33,
  webmoney_classic_account_type SWIFT_COMPILE_NAME("webmoney_classic_account_type") = 34,
};

@class UICollectionViewLayoutAttributes;
@class NSCoder;

/// Simple UICollectionViewFlowLayout that centers the cells rather than justify them
/// Based on https://github.com/Coeur/UICollectionViewLeftAlignedLayout
SWIFT_CLASS("_TtC11ecommpaySDK32CollectionViewCenteredFlowLayout")
@interface CollectionViewCenteredFlowLayout : UICollectionViewFlowLayout
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@class ECMPPaymentData;

SWIFT_PROTOCOL("_TtP11ecommpaySDK12ECMPCallback_")
@protocol ECMPCallback
- (void)onPaymentResult:(ECMPPaymentData * _Nullable)paymentData;
@end

@class Payment;

SWIFT_CLASS("_TtC11ecommpaySDK15ECMPPaymentData")
@interface ECMPPaymentData : NSObject
@property (nonatomic, strong) Payment * _Nullable payment;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ECMPScreenDisplayMode, open) {
  hide_success_final_page SWIFT_COMPILE_NAME("hide_success_final_page") = 0,
  hide_decline_final_page SWIFT_COMPILE_NAME("hide_decline_final_page") = 1,
};

enum ECPPaymentStatus : NSInteger;

SWIFT_CLASS("_TtC11ecommpaySDK16ECPPaymentResult")
@interface ECPPaymentResult : NSObject
@property (nonatomic, readonly) enum ECPPaymentStatus status;
@property (nonatomic, readonly) NSError * _Nullable error;
@property (nonatomic, readonly, copy) NSString * _Nullable token;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ECPPaymentStatus, open) {
  ECPPaymentStatusSuccess = 0,
  ECPPaymentStatusDecline = 100,
  ECPPaymentStatusCancelled = 301,
  ECPPaymentStatusError = 501,
  ECPPaymentStatusUnknown = 20000,
};

@class UIColor;
@class NSNumber;

SWIFT_CLASS("_TtC11ecommpaySDK8ECPTheme")
@interface ECPTheme : NSObject
@property (nonatomic, strong) UIColor * _Nonnull overlayColor;
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull headingTextColor;
@property (nonatomic, strong) UIColor * _Nonnull menuTextColor;
@property (nonatomic, strong) UIColor * _Nonnull fieldTextColor;
@property (nonatomic, strong) UIColor * _Nonnull supportiveTextColor;
@property (nonatomic, strong) UIColor * _Nonnull fieldPlaceholderTextColor;
@property (nonatomic, strong) UIColor * _Nonnull fieldImageTintColor;
@property (nonatomic, strong) UIColor * _Nonnull fieldTextCorrectColor;
@property (nonatomic, strong) UIColor * _Nonnull fieldTextWrongColor;
@property (nonatomic, strong) UIColor * _Nonnull fieldBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull selectorColor;
@property (nonatomic, strong) UIColor * _Nonnull selectorBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull primaryTintColor;
@property (nonatomic, strong) UIColor * _Nonnull secondaryTintColor;
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
@property (nonatomic, strong) UIColor * _Nonnull actionButtonDisableBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull actionButtonDisableTextColor;
@property (nonatomic, strong) UIColor * _Nonnull actionButtonTextColor;
@property (nonatomic) BOOL showShadow;
@property (nonatomic) BOOL showDarkKeyboard;
@property (nonatomic) BOOL showDarkNavigationBar;
@property (nonatomic) BOOL showLightLogo;
@property (nonatomic) BOOL apsLogoOnly;
@property (nonatomic) BOOL showLightAPSLogos;
+ (ECPTheme * _Nonnull)getLightTheme SWIFT_WARN_UNUSED_RESULT;
+ (ECPTheme * _Nonnull)getDarkTheme SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PKPaymentRequest;
@class UIViewController;
@class PaymentInfo;

SWIFT_CLASS("_TtC11ecommpaySDK11EcommpaySDK")
@interface EcommpaySDK : NSObject
/// Version of currently installed Ecommpay SDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Set a custom theme to payment form
/// \param theme theme to use in payment form
///
- (void)setTheme:(ECPTheme * _Nonnull)theme;
/// Set a custom theme to payment form
/// \param theme theme to use in payment form
///
- (void)setPKPaymentRequest:(PKPaymentRequest * _Nonnull)request;
/// Presents UI to begin payment flow
/// \param viewController controller from what you would like to present payment UI
///
/// \param paymentInfo info that is needed to perform payment (merchant_id, proeject_id, etc)
///
/// \param completion result of payment flow
///
- (void)presentPaymentAt:(UIViewController * _Nonnull)viewController paymentInfo:(PaymentInfo * _Nonnull)paymentInfo completionHandler:(void (^ _Nullable)(ECPPaymentResult * _Nonnull))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@class NSStream;

SWIFT_CLASS("_TtC11ecommpaySDK16FoundationStream")
@interface FoundationStream : NSObject <NSStreamDelegate>
/// Delegate for the stream methods. Processes incoming bytes
- (void)stream:(NSStream * _Nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11ecommpaySDK7Payment")
@interface Payment : NSObject
@property (nonatomic, copy) NSString * _Nullable status;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable date;
@property (nonatomic, copy) NSString * _Nullable method;
@property (nonatomic, copy) NSString * _Nullable sum;
@property (nonatomic, copy) NSString * _Nullable currency;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum ActionType : NSInteger;
@class RecurrentInfo;
@class ThreeDSecureInfo;

SWIFT_CLASS("_TtC11ecommpaySDK11PaymentInfo")
@interface PaymentInfo : NSObject
/// Init Payment Info with some additional params
/// \param projectID Unique identifier of your project in Ecommpay
///
/// \param paymentID Unique identifier of the payment in your project
///
/// \param paymentAmount Payment amount in minor units of currency, 1999 means 19.99, 10 means 0.10
///
/// \param paymentCurrency Payment currency in ISO 4217 alpha-3 format
///
/// \param paymentDescription Payment description, for example, T-Shirt with print
///
/// \param customerID Unique identifier of the customer in your project
///
/// \param regionCode Region code of a customer
///
- (nonnull instancetype)initWithProjectID:(NSInteger)projectID paymentID:(NSString * _Nullable)paymentID paymentAmount:(NSInteger)paymentAmount paymentCurrency:(NSString * _Nonnull)paymentCurrency paymentDescription:(NSString * _Nullable)paymentDescription customerID:(NSString * _Nullable)customerID regionCode:(NSString * _Nullable)regionCode OBJC_DESIGNATED_INITIALIZER;
/// Init Payment Info with only required params
/// \param projectID Unique identifier of your project in Ecommpay
///
/// \param paymentID Unique identifier of the payment in your project
///
/// \param paymentAmount Payment amount in minor units of currency, 1999 means 19.99, 10 means 0.10
///
/// \param paymentCurrency Payment currency in ISO 4217 alpha-3 format
///
- (nonnull instancetype)initWithProjectID:(NSInteger)projectID paymentID:(NSString * _Nullable)paymentID paymentAmount:(NSInteger)paymentAmount paymentCurrency:(NSString * _Nonnull)paymentCurrency OBJC_DESIGNATED_INITIALIZER;
/// Init Payment Info with only required params
/// \param projectID Unique identifier of your project in Ecommpay
///
/// \param paymentAmount Payment amount in minor units of currency, 1999 means 19.99, 10 means 0.10
///
/// \param paymentCurrency Payment currency in ISO 4217 alpha-3 format
///
- (nonnull instancetype)initWithProjectID:(NSInteger)projectID paymentAmount:(NSInteger)paymentAmount paymentCurrency:(NSString * _Nonnull)paymentCurrency OBJC_DESIGNATED_INITIALIZER;
/// Sign a request, read more: https://developers.ecommpay.com/en/en_Gate_Authentication.html
/// \param value signature
///
- (void)setSignature:(NSString * _Nonnull)value;
/// Set receipt data
/// \param value Base64
///
- (void)setReceiptData:(NSString * _Nonnull)value;
/// Set Token of payment card
/// \param value token
///
- (void)setToken:(NSString * _Nonnull)value;
/// Set Action of payment, by default its Sale
/// Could be: Sale/Auth/Tokenize/Verify
/// \param ActionType type of operation
///
- (void)setAction:(enum ActionType)action;
/// If set, would treat payment as recurrent
/// \param recurrent RecurrentInfo object
///
- (void)setRecurret:(RecurrentInfo * _Nonnull)recurrent;
/// If you want to use Apple Pay, you would need to set MerchantID from developer.apple.com
/// \param merchantID Your MerchantID in Apple Pay
///
- (void)setApplePayMerchantID:(NSString * _Nonnull)merchantID;
/// \param applePayDescription Your description for Apple Pay page
///
- (void)setApplePayDescription:(NSString * _Nonnull)description;
/// If you know any data for fields what would be asked from a user
/// you could set them and they would be pre-filled
/// \param additionalFields Additional fields for collecting customer information
///
- (void)setAdditionalFields:(NSArray<AdditionalField *> * _Nonnull)additionalFields;
/// Setting the language regardless of the system
/// \param value Language code, example: en (English) or ru (Russian)
///
- (void)setLanguageCode:(NSString * _Nonnull)value;
/// \param secureInfo Parameters for 3D secure 2.0
///
- (void)setSecureInfo:(ThreeDSecureInfo * _Nonnull)secureInfo;
/// \param value Parameter for hide saved wallets
///
- (void)setHideSavedWallets:(BOOL)value;
/// \param value Forced opening of a payment method
///
- (void)setForcePaymentMethod:(NSString * _Nonnull)value;
/// You can hide this or that screen based on the passed parameters
/// \param screenDisplayMode Option to hide the result screen
///
- (PaymentInfo * _Nonnull)addEcmpScreenDisplayMode:(enum ECMPScreenDisplayMode)screenDisplayMode SWIFT_WARN_UNUSED_RESULT;
/// You can hide this or that screen based on the passed parameters
/// Important !!! The parameter will be converted into an enumeration, if the data is not transferred correctly, it will be ignored.
/// \param screenDisplayMode Option to hide the result screen. Parameter
///
- (PaymentInfo * _Nonnull)addScreenDisplayModeString:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Represent Object in Dictionary  [String : Any]
///
/// returns:
/// Dictionary representation
- (NSDictionary<NSString *, id> * _Nullable)dictionaryRepresentation SWIFT_WARN_UNUSED_RESULT;
/// Get composed string with params for signatue
///
/// returns:
/// Composed params string
- (NSString * _Nonnull)getParamsForSignature SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ActionType, open) {
  ActionTypeSale = 1,
  ActionTypeAuth = 2,
  ActionTypeTokenize = 3,
  ActionTypeVerify = 4,
};

enum RecurrentType : NSInteger;
enum RecurrentPeriod : NSInteger;
@class RecurrentInfoSchedule;

SWIFT_CLASS("_TtC11ecommpaySDK13RecurrentInfo")
@interface RecurrentInfo : NSObject
/// Init Recurrent Info with all params
/// \param type Type of recurrent - R/C/U/I
///
/// \param expiryDay Day of recurrent expiration, must be string(2) month in DD format
///
/// \param expiryMonth Month of recurrent expiration, must be string(2) month in MM format
///
/// \param expiryYear Year of recurrent expiration, must be string(4) month in YYYY format.
///
/// \param period Period of payment - Day/Week/Month/Quarter/Year
///
/// \param time Time of recurrent payment to charge
///
/// \param startDate Date to start recurrent payment, must be string(10) in DD-MM-YYYY format
///
/// \param scheduledPaymentID Recurring payment ID
///
- (nonnull instancetype)initWithRecurrentType:(enum RecurrentType)type expiryDay:(NSString * _Nonnull)expiryDay expiryMonth:(NSString * _Nonnull)expiryMonth expiryYear:(NSString * _Nonnull)expiryYear period:(enum RecurrentPeriod)period time:(NSString * _Nonnull)time startDate:(NSString * _Nonnull)startDate scheduledPaymentID:(NSString * _Nonnull)scheduledPaymentID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRecurrentType:(enum RecurrentType)type OBJC_DESIGNATED_INITIALIZER;
- (void)setAmount:(NSInteger)amount;
- (void)setSchedule:(NSArray<RecurrentInfoSchedule *> * _Nonnull)schedule;
/// Represent Object in Dictionary  [String : Any]
///
/// returns:
/// Dictionary representation
- (NSDictionary<NSString *, id> * _Nullable)dictionaryRepresentation SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11ecommpaySDK21RecurrentInfoSchedule")
@interface RecurrentInfoSchedule : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull date;
@property (nonatomic, readonly) NSInteger amount;
- (nonnull instancetype)initWithDate:(NSString * _Nonnull)date amount:(NSInteger)amount OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, RecurrentPeriod, open) {
  RecurrentPeriodDay = 0,
  RecurrentPeriodWeek = 1,
  RecurrentPeriodMonth = 2,
  RecurrentPeriodQuarter = 3,
  RecurrentPeriodYear = 4,
};

typedef SWIFT_ENUM(NSInteger, RecurrentType, open) {
  RecurrentTypeRegular = 0,
  RecurrentTypeOneClick = 1,
  RecurrentTypeAutopayment = 2,
};


SWIFT_CLASS("_TtC11ecommpaySDK23ThreeDSecureAccountInfo")
@interface ThreeDSecureAccountInfo : NSObject
- (void)setAdditional:(NSString * _Nonnull)additional;
- (void)setAgeIndicator:(NSString * _Nonnull)ageIndicator;
- (void)setDate:(NSString * _Nonnull)date;
- (void)setChangeIndicator:(NSString * _Nonnull)changeIndicator;
- (void)setChangeDate:(NSString * _Nonnull)changeDate;
- (void)setPassChangeIndicator:(NSString * _Nonnull)passChangeIndicator;
- (void)setPassChangeDate:(NSString * _Nonnull)passChangeDate;
- (void)setPurchaseNumber:(NSInteger)purchaseNumber;
- (void)setProvisionAttempts:(NSInteger)provisionAttempts;
- (void)setActivityDay:(NSInteger)activityDay;
- (void)setActivityYear:(NSInteger)activityYear;
- (void)setPaymentAgeIndicator:(NSString * _Nonnull)paymentAgeIndicator;
- (void)setPaymentAge:(NSString * _Nonnull)paymentAge;
- (void)setSuspiciousActivity:(NSString * _Nonnull)suspiciousActivity;
- (void)setAuthMethod:(NSString * _Nonnull)authMethod;
- (void)setAuthTime:(NSString * _Nonnull)authTime;
- (void)setAuthData:(NSString * _Nonnull)authData;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ThreeDSecureShippingInfo;
@class ThreeDSecureMpiResultInfo;

SWIFT_CLASS("_TtC11ecommpaySDK24ThreeDSecureCustomerInfo")
@interface ThreeDSecureCustomerInfo : NSObject
- (void)setAddressMatch:(NSString * _Nonnull)addressMatch;
- (void)setHomePhone:(NSString * _Nonnull)homePhone;
- (void)setWorkPhone:(NSString * _Nonnull)workPhone;
- (void)setBillingRegionCode:(NSString * _Nonnull)billingRegionCode;
- (void)setAccountInfo:(ThreeDSecureAccountInfo * _Nonnull)accountInfo;
- (void)setShippingInfo:(ThreeDSecureShippingInfo * _Nonnull)shippingInfo;
- (void)setMpiResultInfo:(ThreeDSecureMpiResultInfo * _Nonnull)mpiResultInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11ecommpaySDK24ThreeDSecureGiftCardInfo")
@interface ThreeDSecureGiftCardInfo : NSObject
- (void)setAmount:(NSInteger)amount;
- (void)setCurrency:(NSString * _Nonnull)currency;
- (void)setCount:(NSInteger)count;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ThreeDSecurePaymentInfo;

SWIFT_CLASS("_TtC11ecommpaySDK16ThreeDSecureInfo")
@interface ThreeDSecureInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)threeDSecurePaymentInfo:(ThreeDSecurePaymentInfo * _Nullable)threeDSecurePaymentInfo threeDSecureCustomerInfo:(ThreeDSecureCustomerInfo * _Nullable)threeDSecureCustomerInfo OBJC_DESIGNATED_INITIALIZER SWIFT_METHOD_FAMILY(init);
- (void)setThreeDSecurePaymentInfo:(ThreeDSecurePaymentInfo * _Nonnull)threeDSecurePaymentInfo;
- (void)setThreeDSecureCustomerInfo:(ThreeDSecureCustomerInfo * _Nonnull)threeDSecureCustomerInfo;
@end


SWIFT_CLASS("_TtC11ecommpaySDK25ThreeDSecureMpiResultInfo")
@interface ThreeDSecureMpiResultInfo : NSObject
- (void)setAcsOperationId:(NSString * _Nonnull)acsOperationId;
- (void)setAuthenticationFlow:(NSString * _Nonnull)authenticationFlow;
- (void)setAuthenticationTimestamp:(NSString * _Nonnull)authenticationTimestamp;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11ecommpaySDK23ThreeDSecurePaymentInfo")
@interface ThreeDSecurePaymentInfo : NSObject
- (void)setReorder:(NSString * _Nonnull)reorder;
- (void)setPreorderPurchase:(NSString * _Nonnull)preorderPurchase;
- (void)setPreorderDate:(NSString * _Nonnull)preorderDate;
- (void)setChallengeIndicator:(NSString * _Nonnull)challengeIndicator;
- (void)setChallengeWindow:(NSString * _Nonnull)challengeWindow;
- (void)setGiftCard:(ThreeDSecureGiftCardInfo * _Nonnull)giftCard;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11ecommpaySDK24ThreeDSecureShippingInfo")
@interface ThreeDSecureShippingInfo : NSObject
- (void)setType:(NSString * _Nonnull)type;
- (void)setDeliveryTime:(NSString * _Nonnull)deliveryTime;
- (void)setDeliveryEmail:(NSString * _Nonnull)deliveryEmail;
- (void)setAddressUsageIndicator:(NSString * _Nonnull)addressUsageIndicator;
- (void)setAddressUsage:(NSString * _Nonnull)addressUsage;
- (void)setCity:(NSString * _Nonnull)city;
- (void)setCountry:(NSString * _Nonnull)country;
- (void)setAddress:(NSString * _Nonnull)address;
- (void)setPostal:(NSString * _Nonnull)postal;
- (void)setRegionCode:(NSString * _Nonnull)regionCode;
- (void)setNameIndicator:(NSString * _Nonnull)nameIndicator;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end














@interface UIViewController (SWIFT_EXTENSION(ecommpaySDK))
- (void)awakeFromNib;
@end


SWIFT_CLASS("_TtC11ecommpaySDK9WebSocket")
@interface WebSocket : NSObject <NSStreamDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
#ifndef ECOMMPAYSDK_SWIFT_H
#define ECOMMPAYSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ecommpaySDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum AdditionalFieldType : NSInteger;
@class NSString;

SWIFT_CLASS("_TtC11ecommpaySDK15AdditionalField")
@interface AdditionalField : NSObject
@property (nonatomic) enum AdditionalFieldType type;
@property (nonatomic, copy) NSString * _Nonnull value;
@property (nonatomic, copy) NSString * _Nonnull serverName;
- (nonnull instancetype)initWithType:(enum AdditionalFieldType)type value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCustomName:(NSString * _Nonnull)customName value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM(NSInteger, AdditionalFieldType, open) {
  customer_first_name SWIFT_COMPILE_NAME("customer_first_name") = 0,
  customer_middle_name SWIFT_COMPILE_NAME("customer_middle_name") = 1,
  customer_last_name SWIFT_COMPILE_NAME("customer_last_name") = 2,
  customer_phone SWIFT_COMPILE_NAME("customer_phone") = 3,
  customer_email SWIFT_COMPILE_NAME("customer_email") = 4,
  customer_country SWIFT_COMPILE_NAME("customer_country") = 5,
  customer_state SWIFT_COMPILE_NAME("customer_state") = 6,
  customer_city SWIFT_COMPILE_NAME("customer_city") = 7,
  customer_address SWIFT_COMPILE_NAME("customer_address") = 8,
  customer_zip SWIFT_COMPILE_NAME("customer_zip") = 9,
  customer_day_of_birth SWIFT_COMPILE_NAME("customer_day_of_birth") = 10,
  customer_birthplace SWIFT_COMPILE_NAME("customer_birthplace") = 11,
  customer_ssn SWIFT_COMPILE_NAME("customer_ssn") = 12,
  customer_domain SWIFT_COMPILE_NAME("customer_domain") = 13,
  customer_mir SWIFT_COMPILE_NAME("customer_mir") = 14,
  customer_account_id SWIFT_COMPILE_NAME("customer_account_id") = 15,
  customer_language SWIFT_COMPILE_NAME("customer_language") = 16,
  customer_screen_res SWIFT_COMPILE_NAME("customer_screen_res") = 17,
  customer_save SWIFT_COMPILE_NAME("customer_save") = 18,
  billing_postal SWIFT_COMPILE_NAME("billing_postal") = 19,
  billing_country SWIFT_COMPILE_NAME("billing_country") = 20,
  billing_region SWIFT_COMPILE_NAME("billing_region") = 21,
  billing_city SWIFT_COMPILE_NAME("billing_city") = 22,
  billing_address SWIFT_COMPILE_NAME("billing_address") = 23,
  identify_doc_number SWIFT_COMPILE_NAME("identify_doc_number") = 24,
  identify_doc_type SWIFT_COMPILE_NAME("identify_doc_type") = 25,
  identify_doc_issue_date SWIFT_COMPILE_NAME("identify_doc_issue_date") = 26,
  identify_doc_issue_by SWIFT_COMPILE_NAME("identify_doc_issue_by") = 27,
  custom SWIFT_COMPILE_NAME("custom") = 28,
  doku_customer_first_name SWIFT_COMPILE_NAME("doku_customer_first_name") = 29,
  doku_customer_email SWIFT_COMPILE_NAME("doku_customer_email") = 30,
  neteller_account_number SWIFT_COMPILE_NAME("neteller_account_number") = 31,
  qiwi_account_number SWIFT_COMPILE_NAME("qiwi_account_number") = 32,
  webmoney_classic_account_number SWIFT_COMPILE_NAME("webmoney_classic_account_number") = 33,
  webmoney_classic_account_type SWIFT_COMPILE_NAME("webmoney_classic_account_type") = 34,
};

@class UICollectionViewLayoutAttributes;
@class NSCoder;

/// Simple UICollectionViewFlowLayout that centers the cells rather than justify them
/// Based on https://github.com/Coeur/UICollectionViewLeftAlignedLayout
SWIFT_CLASS("_TtC11ecommpaySDK32CollectionViewCenteredFlowLayout")
@interface CollectionViewCenteredFlowLayout : UICollectionViewFlowLayout
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@class ECMPPaymentData;

SWIFT_PROTOCOL("_TtP11ecommpaySDK12ECMPCallback_")
@protocol ECMPCallback
- (void)onPaymentResult:(ECMPPaymentData * _Nullable)paymentData;
@end

@class Payment;

SWIFT_CLASS("_TtC11ecommpaySDK15ECMPPaymentData")
@interface ECMPPaymentData : NSObject
@property (nonatomic, strong) Payment * _Nullable payment;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ECMPScreenDisplayMode, open) {
  hide_success_final_page SWIFT_COMPILE_NAME("hide_success_final_page") = 0,
  hide_decline_final_page SWIFT_COMPILE_NAME("hide_decline_final_page") = 1,
};

enum ECPPaymentStatus : NSInteger;

SWIFT_CLASS("_TtC11ecommpaySDK16ECPPaymentResult")
@interface ECPPaymentResult : NSObject
@property (nonatomic, readonly) enum ECPPaymentStatus status;
@property (nonatomic, readonly) NSError * _Nullable error;
@property (nonatomic, readonly, copy) NSString * _Nullable token;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ECPPaymentStatus, open) {
  ECPPaymentStatusSuccess = 0,
  ECPPaymentStatusDecline = 100,
  ECPPaymentStatusCancelled = 301,
  ECPPaymentStatusError = 501,
  ECPPaymentStatusUnknown = 20000,
};

@class UIColor;
@class NSNumber;

SWIFT_CLASS("_TtC11ecommpaySDK8ECPTheme")
@interface ECPTheme : NSObject
@property (nonatomic, strong) UIColor * _Nonnull overlayColor;
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull headingTextColor;
@property (nonatomic, strong) UIColor * _Nonnull menuTextColor;
@property (nonatomic, strong) UIColor * _Nonnull fieldTextColor;
@property (nonatomic, strong) UIColor * _Nonnull supportiveTextColor;
@property (nonatomic, strong) UIColor * _Nonnull fieldPlaceholderTextColor;
@property (nonatomic, strong) UIColor * _Nonnull fieldImageTintColor;
@property (nonatomic, strong) UIColor * _Nonnull fieldTextCorrectColor;
@property (nonatomic, strong) UIColor * _Nonnull fieldTextWrongColor;
@property (nonatomic, strong) UIColor * _Nonnull fieldBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull selectorColor;
@property (nonatomic, strong) UIColor * _Nonnull selectorBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull primaryTintColor;
@property (nonatomic, strong) UIColor * _Nonnull secondaryTintColor;
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
@property (nonatomic, strong) UIColor * _Nonnull actionButtonDisableBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull actionButtonDisableTextColor;
@property (nonatomic, strong) UIColor * _Nonnull actionButtonTextColor;
@property (nonatomic) BOOL showShadow;
@property (nonatomic) BOOL showDarkKeyboard;
@property (nonatomic) BOOL showDarkNavigationBar;
@property (nonatomic) BOOL showLightLogo;
@property (nonatomic) BOOL apsLogoOnly;
@property (nonatomic) BOOL showLightAPSLogos;
+ (ECPTheme * _Nonnull)getLightTheme SWIFT_WARN_UNUSED_RESULT;
+ (ECPTheme * _Nonnull)getDarkTheme SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PKPaymentRequest;
@class UIViewController;
@class PaymentInfo;

SWIFT_CLASS("_TtC11ecommpaySDK11EcommpaySDK")
@interface EcommpaySDK : NSObject
/// Version of currently installed Ecommpay SDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Set a custom theme to payment form
/// \param theme theme to use in payment form
///
- (void)setTheme:(ECPTheme * _Nonnull)theme;
/// Set a custom theme to payment form
/// \param theme theme to use in payment form
///
- (void)setPKPaymentRequest:(PKPaymentRequest * _Nonnull)request;
/// Presents UI to begin payment flow
/// \param viewController controller from what you would like to present payment UI
///
/// \param paymentInfo info that is needed to perform payment (merchant_id, proeject_id, etc)
///
/// \param completion result of payment flow
///
- (void)presentPaymentAt:(UIViewController * _Nonnull)viewController paymentInfo:(PaymentInfo * _Nonnull)paymentInfo completionHandler:(void (^ _Nullable)(ECPPaymentResult * _Nonnull))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@class NSStream;

SWIFT_CLASS("_TtC11ecommpaySDK16FoundationStream")
@interface FoundationStream : NSObject <NSStreamDelegate>
/// Delegate for the stream methods. Processes incoming bytes
- (void)stream:(NSStream * _Nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11ecommpaySDK7Payment")
@interface Payment : NSObject
@property (nonatomic, copy) NSString * _Nullable status;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable date;
@property (nonatomic, copy) NSString * _Nullable method;
@property (nonatomic, copy) NSString * _Nullable sum;
@property (nonatomic, copy) NSString * _Nullable currency;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum ActionType : NSInteger;
@class RecurrentInfo;
@class ThreeDSecureInfo;

SWIFT_CLASS("_TtC11ecommpaySDK11PaymentInfo")
@interface PaymentInfo : NSObject
/// Init Payment Info with some additional params
/// \param projectID Unique identifier of your project in Ecommpay
///
/// \param paymentID Unique identifier of the payment in your project
///
/// \param paymentAmount Payment amount in minor units of currency, 1999 means 19.99, 10 means 0.10
///
/// \param paymentCurrency Payment currency in ISO 4217 alpha-3 format
///
/// \param paymentDescription Payment description, for example, T-Shirt with print
///
/// \param customerID Unique identifier of the customer in your project
///
/// \param regionCode Region code of a customer
///
- (nonnull instancetype)initWithProjectID:(NSInteger)projectID paymentID:(NSString * _Nullable)paymentID paymentAmount:(NSInteger)paymentAmount paymentCurrency:(NSString * _Nonnull)paymentCurrency paymentDescription:(NSString * _Nullable)paymentDescription customerID:(NSString * _Nullable)customerID regionCode:(NSString * _Nullable)regionCode OBJC_DESIGNATED_INITIALIZER;
/// Init Payment Info with only required params
/// \param projectID Unique identifier of your project in Ecommpay
///
/// \param paymentID Unique identifier of the payment in your project
///
/// \param paymentAmount Payment amount in minor units of currency, 1999 means 19.99, 10 means 0.10
///
/// \param paymentCurrency Payment currency in ISO 4217 alpha-3 format
///
- (nonnull instancetype)initWithProjectID:(NSInteger)projectID paymentID:(NSString * _Nullable)paymentID paymentAmount:(NSInteger)paymentAmount paymentCurrency:(NSString * _Nonnull)paymentCurrency OBJC_DESIGNATED_INITIALIZER;
/// Init Payment Info with only required params
/// \param projectID Unique identifier of your project in Ecommpay
///
/// \param paymentAmount Payment amount in minor units of currency, 1999 means 19.99, 10 means 0.10
///
/// \param paymentCurrency Payment currency in ISO 4217 alpha-3 format
///
- (nonnull instancetype)initWithProjectID:(NSInteger)projectID paymentAmount:(NSInteger)paymentAmount paymentCurrency:(NSString * _Nonnull)paymentCurrency OBJC_DESIGNATED_INITIALIZER;
/// Sign a request, read more: https://developers.ecommpay.com/en/en_Gate_Authentication.html
/// \param value signature
///
- (void)setSignature:(NSString * _Nonnull)value;
/// Set receipt data
/// \param value Base64
///
- (void)setReceiptData:(NSString * _Nonnull)value;
/// Set Token of payment card
/// \param value token
///
- (void)setToken:(NSString * _Nonnull)value;
/// Set Action of payment, by default its Sale
/// Could be: Sale/Auth/Tokenize/Verify
/// \param ActionType type of operation
///
- (void)setAction:(enum ActionType)action;
/// If set, would treat payment as recurrent
/// \param recurrent RecurrentInfo object
///
- (void)setRecurret:(RecurrentInfo * _Nonnull)recurrent;
/// If you want to use Apple Pay, you would need to set MerchantID from developer.apple.com
/// \param merchantID Your MerchantID in Apple Pay
///
- (void)setApplePayMerchantID:(NSString * _Nonnull)merchantID;
/// \param applePayDescription Your description for Apple Pay page
///
- (void)setApplePayDescription:(NSString * _Nonnull)description;
/// If you know any data for fields what would be asked from a user
/// you could set them and they would be pre-filled
/// \param additionalFields Additional fields for collecting customer information
///
- (void)setAdditionalFields:(NSArray<AdditionalField *> * _Nonnull)additionalFields;
/// Setting the language regardless of the system
/// \param value Language code, example: en (English) or ru (Russian)
///
- (void)setLanguageCode:(NSString * _Nonnull)value;
/// \param secureInfo Parameters for 3D secure 2.0
///
- (void)setSecureInfo:(ThreeDSecureInfo * _Nonnull)secureInfo;
/// \param value Parameter for hide saved wallets
///
- (void)setHideSavedWallets:(BOOL)value;
/// \param value Forced opening of a payment method
///
- (void)setForcePaymentMethod:(NSString * _Nonnull)value;
/// You can hide this or that screen based on the passed parameters
/// \param screenDisplayMode Option to hide the result screen
///
- (PaymentInfo * _Nonnull)addEcmpScreenDisplayMode:(enum ECMPScreenDisplayMode)screenDisplayMode SWIFT_WARN_UNUSED_RESULT;
/// You can hide this or that screen based on the passed parameters
/// Important !!! The parameter will be converted into an enumeration, if the data is not transferred correctly, it will be ignored.
/// \param screenDisplayMode Option to hide the result screen. Parameter
///
- (PaymentInfo * _Nonnull)addScreenDisplayModeString:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Represent Object in Dictionary  [String : Any]
///
/// returns:
/// Dictionary representation
- (NSDictionary<NSString *, id> * _Nullable)dictionaryRepresentation SWIFT_WARN_UNUSED_RESULT;
/// Get composed string with params for signatue
///
/// returns:
/// Composed params string
- (NSString * _Nonnull)getParamsForSignature SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ActionType, open) {
  ActionTypeSale = 1,
  ActionTypeAuth = 2,
  ActionTypeTokenize = 3,
  ActionTypeVerify = 4,
};

enum RecurrentType : NSInteger;
enum RecurrentPeriod : NSInteger;
@class RecurrentInfoSchedule;

SWIFT_CLASS("_TtC11ecommpaySDK13RecurrentInfo")
@interface RecurrentInfo : NSObject
/// Init Recurrent Info with all params
/// \param type Type of recurrent - R/C/U/I
///
/// \param expiryDay Day of recurrent expiration, must be string(2) month in DD format
///
/// \param expiryMonth Month of recurrent expiration, must be string(2) month in MM format
///
/// \param expiryYear Year of recurrent expiration, must be string(4) month in YYYY format.
///
/// \param period Period of payment - Day/Week/Month/Quarter/Year
///
/// \param time Time of recurrent payment to charge
///
/// \param startDate Date to start recurrent payment, must be string(10) in DD-MM-YYYY format
///
/// \param scheduledPaymentID Recurring payment ID
///
- (nonnull instancetype)initWithRecurrentType:(enum RecurrentType)type expiryDay:(NSString * _Nonnull)expiryDay expiryMonth:(NSString * _Nonnull)expiryMonth expiryYear:(NSString * _Nonnull)expiryYear period:(enum RecurrentPeriod)period time:(NSString * _Nonnull)time startDate:(NSString * _Nonnull)startDate scheduledPaymentID:(NSString * _Nonnull)scheduledPaymentID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRecurrentType:(enum RecurrentType)type OBJC_DESIGNATED_INITIALIZER;
- (void)setAmount:(NSInteger)amount;
- (void)setSchedule:(NSArray<RecurrentInfoSchedule *> * _Nonnull)schedule;
/// Represent Object in Dictionary  [String : Any]
///
/// returns:
/// Dictionary representation
- (NSDictionary<NSString *, id> * _Nullable)dictionaryRepresentation SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11ecommpaySDK21RecurrentInfoSchedule")
@interface RecurrentInfoSchedule : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull date;
@property (nonatomic, readonly) NSInteger amount;
- (nonnull instancetype)initWithDate:(NSString * _Nonnull)date amount:(NSInteger)amount OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, RecurrentPeriod, open) {
  RecurrentPeriodDay = 0,
  RecurrentPeriodWeek = 1,
  RecurrentPeriodMonth = 2,
  RecurrentPeriodQuarter = 3,
  RecurrentPeriodYear = 4,
};

typedef SWIFT_ENUM(NSInteger, RecurrentType, open) {
  RecurrentTypeRegular = 0,
  RecurrentTypeOneClick = 1,
  RecurrentTypeAutopayment = 2,
};


SWIFT_CLASS("_TtC11ecommpaySDK23ThreeDSecureAccountInfo")
@interface ThreeDSecureAccountInfo : NSObject
- (void)setAdditional:(NSString * _Nonnull)additional;
- (void)setAgeIndicator:(NSString * _Nonnull)ageIndicator;
- (void)setDate:(NSString * _Nonnull)date;
- (void)setChangeIndicator:(NSString * _Nonnull)changeIndicator;
- (void)setChangeDate:(NSString * _Nonnull)changeDate;
- (void)setPassChangeIndicator:(NSString * _Nonnull)passChangeIndicator;
- (void)setPassChangeDate:(NSString * _Nonnull)passChangeDate;
- (void)setPurchaseNumber:(NSInteger)purchaseNumber;
- (void)setProvisionAttempts:(NSInteger)provisionAttempts;
- (void)setActivityDay:(NSInteger)activityDay;
- (void)setActivityYear:(NSInteger)activityYear;
- (void)setPaymentAgeIndicator:(NSString * _Nonnull)paymentAgeIndicator;
- (void)setPaymentAge:(NSString * _Nonnull)paymentAge;
- (void)setSuspiciousActivity:(NSString * _Nonnull)suspiciousActivity;
- (void)setAuthMethod:(NSString * _Nonnull)authMethod;
- (void)setAuthTime:(NSString * _Nonnull)authTime;
- (void)setAuthData:(NSString * _Nonnull)authData;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ThreeDSecureShippingInfo;
@class ThreeDSecureMpiResultInfo;

SWIFT_CLASS("_TtC11ecommpaySDK24ThreeDSecureCustomerInfo")
@interface ThreeDSecureCustomerInfo : NSObject
- (void)setAddressMatch:(NSString * _Nonnull)addressMatch;
- (void)setHomePhone:(NSString * _Nonnull)homePhone;
- (void)setWorkPhone:(NSString * _Nonnull)workPhone;
- (void)setBillingRegionCode:(NSString * _Nonnull)billingRegionCode;
- (void)setAccountInfo:(ThreeDSecureAccountInfo * _Nonnull)accountInfo;
- (void)setShippingInfo:(ThreeDSecureShippingInfo * _Nonnull)shippingInfo;
- (void)setMpiResultInfo:(ThreeDSecureMpiResultInfo * _Nonnull)mpiResultInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11ecommpaySDK24ThreeDSecureGiftCardInfo")
@interface ThreeDSecureGiftCardInfo : NSObject
- (void)setAmount:(NSInteger)amount;
- (void)setCurrency:(NSString * _Nonnull)currency;
- (void)setCount:(NSInteger)count;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ThreeDSecurePaymentInfo;

SWIFT_CLASS("_TtC11ecommpaySDK16ThreeDSecureInfo")
@interface ThreeDSecureInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)threeDSecurePaymentInfo:(ThreeDSecurePaymentInfo * _Nullable)threeDSecurePaymentInfo threeDSecureCustomerInfo:(ThreeDSecureCustomerInfo * _Nullable)threeDSecureCustomerInfo OBJC_DESIGNATED_INITIALIZER SWIFT_METHOD_FAMILY(init);
- (void)setThreeDSecurePaymentInfo:(ThreeDSecurePaymentInfo * _Nonnull)threeDSecurePaymentInfo;
- (void)setThreeDSecureCustomerInfo:(ThreeDSecureCustomerInfo * _Nonnull)threeDSecureCustomerInfo;
@end


SWIFT_CLASS("_TtC11ecommpaySDK25ThreeDSecureMpiResultInfo")
@interface ThreeDSecureMpiResultInfo : NSObject
- (void)setAcsOperationId:(NSString * _Nonnull)acsOperationId;
- (void)setAuthenticationFlow:(NSString * _Nonnull)authenticationFlow;
- (void)setAuthenticationTimestamp:(NSString * _Nonnull)authenticationTimestamp;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11ecommpaySDK23ThreeDSecurePaymentInfo")
@interface ThreeDSecurePaymentInfo : NSObject
- (void)setReorder:(NSString * _Nonnull)reorder;
- (void)setPreorderPurchase:(NSString * _Nonnull)preorderPurchase;
- (void)setPreorderDate:(NSString * _Nonnull)preorderDate;
- (void)setChallengeIndicator:(NSString * _Nonnull)challengeIndicator;
- (void)setChallengeWindow:(NSString * _Nonnull)challengeWindow;
- (void)setGiftCard:(ThreeDSecureGiftCardInfo * _Nonnull)giftCard;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11ecommpaySDK24ThreeDSecureShippingInfo")
@interface ThreeDSecureShippingInfo : NSObject
- (void)setType:(NSString * _Nonnull)type;
- (void)setDeliveryTime:(NSString * _Nonnull)deliveryTime;
- (void)setDeliveryEmail:(NSString * _Nonnull)deliveryEmail;
- (void)setAddressUsageIndicator:(NSString * _Nonnull)addressUsageIndicator;
- (void)setAddressUsage:(NSString * _Nonnull)addressUsage;
- (void)setCity:(NSString * _Nonnull)city;
- (void)setCountry:(NSString * _Nonnull)country;
- (void)setAddress:(NSString * _Nonnull)address;
- (void)setPostal:(NSString * _Nonnull)postal;
- (void)setRegionCode:(NSString * _Nonnull)regionCode;
- (void)setNameIndicator:(NSString * _Nonnull)nameIndicator;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end














@interface UIViewController (SWIFT_EXTENSION(ecommpaySDK))
- (void)awakeFromNib;
@end


SWIFT_CLASS("_TtC11ecommpaySDK9WebSocket")
@interface WebSocket : NSObject <NSStreamDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
